import numpy as np
from gym import spaces
import optimal_lqr_control
#from stable_baselines.common.env_checker import check_env
import gym
import sys
from scipy.linalg import expm
"""
Settings for linear quadratic regulator
"""
A_rand = np.random.randn(2,2)
A_rand_T = np.transpose(A_rand)
#A2 = expm(A_rand-A_rand_T) 
#A2 = np.array([[-0.33629175, -0.94175785],
#       [ 0.94175785, -0.33629175]])
#A2 = np.array([[-0.91710299, -0.36991407,  0.14861251],
#       [ 0.19090147, -0.73478173, -0.65088589],
#       [ 0.34996961, -0.56855905,  0.74448766]])
	   
	   
A2 = np.array([[ 0.08446337, -0.15414556, -0.08415369,  0.43801883,  0.00841918,
         0.47247143,  0.02326497, -0.13391266,  0.06757959, -0.08693055,
         0.15556825,  0.07205763,  0.10745275, -0.28108429, -0.13315239,
        -0.18900378, -0.03648655,  0.07325846,  0.11229727, -0.02639562,
        -0.17040337,  0.0031704 ,  0.30515195,  0.09027427,  0.08753934,
        -0.09353844, -0.00120523,  0.33727   , -0.14379048, -0.20421511],
       [ 0.36526026,  0.18700683,  0.36718473,  0.3090937 ,  0.05593196,
        -0.16915985,  0.29639182, -0.07839942, -0.01168336, -0.06337921,
        -0.22501085, -0.07669655, -0.10916236, -0.00977439, -0.21353204,
        -0.05192867, -0.27097377, -0.21949762, -0.04855025, -0.0668052 ,
        -0.09292043, -0.29710249, -0.1070835 ,  0.07308443, -0.2279079 ,
         0.15482147, -0.10035874,  0.07412028, -0.09833329,  0.10609664],
       [-0.08680014, -0.01383677,  0.26477569, -0.03844235, -0.02480484,
         0.14577054, -0.24399923, -0.15885615,  0.25059928,  0.01859123,
         0.15186704, -0.44696202, -0.07037391, -0.13297875,  0.05374307,
        -0.03481251, -0.02834195, -0.19298564, -0.09730002,  0.21610207,
         0.21214499,  0.08522442, -0.14468597, -0.26730329, -0.36634775,
        -0.19639835,  0.14071027,  0.03351885, -0.22133433, -0.14061318],
       [-0.09892294,  0.074597  ,  0.14970036, -0.36268748,  0.18070124,
         0.00906764,  0.11712556,  0.18754691,  0.17606956, -0.24302705,
        -0.05118276,  0.28724465, -0.13124181, -0.48442663,  0.27559524,
        -0.06183951,  0.05237094,  0.1780111 ,  0.09719289,  0.03595313,
        -0.02246461, -0.18110603,  0.09960038, -0.05736988, -0.28793705,
         0.04307924, -0.1387505 ,  0.19705729,  0.04831038,  0.07308509],
       [ 0.20026996,  0.00905229,  0.16179414, -0.01639307,  0.27876864,
        -0.23866157,  0.05502483, -0.24411035,  0.42774285, -0.0832394 ,
         0.09547296, -0.04216065,  0.07663437,  0.10313404,  0.10647949,
         0.29558089,  0.17734932,  0.1038887 , -0.17137562,  0.0630419 ,
        -0.28272849,  0.08865876,  0.33800602,  0.07303376,  0.13036821,
        -0.14128521, -0.14689086, -0.23150365, -0.09819015, -0.12384433],
       [-0.07129408,  0.36350289, -0.09421231,  0.12228514, -0.14405758,
         0.06107548, -0.13605556,  0.02117257,  0.1830536 ,  0.02959292,
         0.11954215, -0.12091984,  0.04049962,  0.05553383, -0.05275317,
        -0.3360287 ,  0.31633607, -0.02248628, -0.18174834,  0.12132762,
        -0.12288927, -0.17877349,  0.10941475,  0.34339872, -0.23575647,
        -0.05941834,  0.03790938, -0.08931294,  0.41734955,  0.20929187],
       [-0.06272414, -0.17650197, -0.08747144,  0.38538049,  0.1062115 ,
        -0.10621154,  0.12599133,  0.46996779,  0.12355501,  0.03434534,
        -0.06991758,  0.09005115,  0.06056237, -0.00162061,  0.26444693,
         0.05541681,  0.26204091, -0.19417332,  0.16666984,  0.0417713 ,
         0.1081184 , -0.03990684, -0.09049868,  0.25138928, -0.17359142,
        -0.05775995,  0.20884283, -0.21462648, -0.30398948, -0.08485602],
       [ 0.3806532 ,  0.06015659, -0.02763416, -0.13803223,  0.27588646,
         0.28096063,  0.04245086,  0.44143593,  0.10848163,  0.16162084,
         0.02981115, -0.23292116, -0.21550313,  0.1054573 , -0.11744232,
        -0.20194324, -0.04773951,  0.19603767, -0.04167208, -0.03664322,
         0.24108516, -0.09971772,  0.21982294, -0.15345879,  0.20507802,
        -0.0316063 ,  0.05114505, -0.15534972, -0.06821487,  0.12882385],
       [ 0.12403257,  0.04416311,  0.03811357, -0.31854401, -0.08498423,
         0.12959124, -0.05195773, -0.05735209, -0.09102039,  0.17913917,
        -0.11814052,  0.04945403,  0.31892805,  0.12631245, -0.07287423,
         0.07484452,  0.06136041, -0.17418108,  0.05163231,  0.10704015,
         0.28042179,  0.08637234,  0.41032299,  0.29644354, -0.25965884,
         0.36680872, -0.09776764,  0.08253521, -0.21367422, -0.09904688],
       [-0.05231949,  0.13282742, -0.28363448,  0.04854051, -0.05971049,
         0.00079785, -0.00860771, -0.28358376,  0.31923579,  0.55717453,
        -0.22919975,  0.16387903, -0.11643445, -0.13154675,  0.21727843,
        -0.0637707 ,  0.03752942, -0.12690436, -0.13473705, -0.2132823 ,
         0.12533851, -0.19466086, -0.04482002, -0.10915811,  0.13190137,
        -0.02303991, -0.15454133,  0.07822999, -0.18895487,  0.0809559 ],
       [ 0.20585865, -0.38801793,  0.13222679, -0.05671445, -0.00662092,
         0.0449816 ,  0.20224704, -0.12018235, -0.07736579,  0.1186456 ,
         0.16021426, -0.04938895, -0.03493413, -0.01726199, -0.08831942,
        -0.12606047,  0.43329225,  0.0830772 ,  0.01891422, -0.39469917,
         0.13770749,  0.17685352, -0.22275827,  0.06818361, -0.22749098,
        -0.10790374, -0.34666965, -0.02448904,  0.11881714,  0.04445855],
       [ 0.14036824,  0.3246836 ,  0.0474421 ,  0.14014605,  0.19447889,
         0.17349841, -0.31272485, -0.08199993, -0.20936692, -0.09869554,
        -0.10716525,  0.06492088, -0.0031913 , -0.28410183, -0.16896534,
         0.43111635,  0.41324038, -0.02435158,  0.02825382, -0.16793851,
         0.16344058, -0.12456311, -0.09373564, -0.11007899,  0.0716571 ,
         0.08649488,  0.12938516, -0.10518454,  0.08017758, -0.07608157],
       [-0.24971328,  0.19307679,  0.1131294 ,  0.07407569,  0.17657331,
         0.00199826, -0.15636096,  0.0191058 ,  0.10416413, -0.04237287,
         0.02349326, -0.20848384,  0.33278802,  0.12275333,  0.04426308,
        -0.21401544, -0.05489983,  0.31360466,  0.2552812 , -0.10057736,
         0.05594183, -0.20315598, -0.27279416,  0.05573162,  0.12484577,
         0.21962584, -0.38434973, -0.09207191, -0.12894018, -0.24621523],
       [ 0.36493045,  0.22155531, -0.04157004, -0.01580702, -0.16097285,
         0.06727204, -0.07960176,  0.33895369,  0.17388584, -0.05038251,
         0.04909191,  0.23148634,  0.24328883,  0.18142891,  0.14397046,
        -0.00928011,  0.00935443, -0.10819589, -0.26932645, -0.09582133,
        -0.13958436,  0.20912028, -0.2520333 , -0.23046953, -0.05781609,
         0.01629746, -0.07639752,  0.26712808,  0.09318026, -0.3155279 ],
       [ 0.08547911, -0.18028647, -0.04086218,  0.15485116, -0.03198716,
         0.1143946 , -0.04416355, -0.09345559, -0.19027804, -0.08101662,
        -0.16635883,  0.12142388,  0.17241744,  0.25685128,  0.10669695,
         0.06226253,  0.18524228,  0.38237204, -0.26685715,  0.40062402,
         0.04606138, -0.26861561, -0.07143259, -0.21405328, -0.14428653,
        -0.08570294, -0.10627349,  0.10371892, -0.20272958,  0.29129159],
       [-0.24061175, -0.0347609 ,  0.11910075, -0.06328185,  0.29802664,
         0.12561627, -0.05057765, -0.01608362, -0.18809725,  0.21477936,
        -0.30070154,  0.06598778, -0.19969695,  0.17416135, -0.04848836,
        -0.15177167,  0.02250249,  0.20063593, -0.29083122, -0.20342513,
        -0.33599058,  0.05786492,  0.02755737,  0.05382823, -0.25940161,
         0.03988094,  0.26250194, -0.02768695, -0.05610848, -0.33924373],
       [ 0.18640501,  0.23797774,  0.0209775 , -0.18605016,  0.06178688,
         0.244261  ,  0.22834341, -0.19436751, -0.1227754 ,  0.05015942,
        -0.21525085,  0.13738064,  0.30968053, -0.15735914,  0.06791849,
        -0.20039461, -0.09474149, -0.01425204,  0.17240244,  0.17492717,
        -0.08134588,  0.19839143, -0.22480374,  0.08305934,  0.02809983,
        -0.38761517,  0.10375825, -0.36508822, -0.0531053 ,  0.03331698],
       [ 0.11671573,  0.06204958,  0.08257467, -0.08998554, -0.33908182,
         0.14366267,  0.13145529, -0.00740552,  0.20847214,  0.05186919,
        -0.16873537, -0.31303167, -0.09725835, -0.02395864,  0.13905268,
         0.25273981,  0.10074783,  0.38404585,  0.13933813, -0.04977444,
        -0.15824973,  0.1202437 , -0.21482598,  0.28051373,  0.1012954 ,
         0.18016891,  0.29063667,  0.23092568, -0.09437379,  0.12451828],
       [ 0.13231014, -0.22127907, -0.26703508, -0.05962474,  0.11469177,
        -0.0112204 , -0.1812626 ,  0.00468824,  0.28589911,  0.21600873,
         0.0897976 ,  0.09909598,  0.22123566, -0.01049271, -0.31166576,
         0.22675591, -0.25246028,  0.14100132,  0.26894501, -0.05932446,
        -0.1968769 , -0.16442951, -0.11653728, -0.09543651, -0.38900172,
         0.037286  ,  0.14636686, -0.11418567,  0.14691807,  0.10910363],
       [ 0.24494095,  0.1631651 , -0.38377892,  0.05175728,  0.43189675,
        -0.08392893, -0.06548188, -0.21168806, -0.16872305, -0.00415236,
         0.20663116, -0.0595719 , -0.31374554,  0.11248477,  0.24747506,
        -0.03236824, -0.04643255,  0.0171545 ,  0.16520177,  0.22012827,
         0.02683451,  0.20180239, -0.17015284,  0.18418007, -0.14890073,
         0.1167159 , -0.05609732,  0.22468859, -0.00255617, -0.02602707],
       [ 0.0690539 , -0.02552449,  0.12717501, -0.08840022, -0.17828279,
         0.13645022, -0.04398055, -0.09580471,  0.10054801, -0.04995577,
        -0.12293915,  0.18765651, -0.32201016,  0.40818447,  0.02506623,
         0.07977114,  0.04104831, -0.04677204,  0.39913632,  0.08235857,
         0.12427061, -0.33023653,  0.03328856,  0.06684663,  0.00704976,
        -0.32851288, -0.03180892,  0.05785551,  0.18616315, -0.3490228 ],
       [-0.10698842, -0.04285091,  0.10961667,  0.25271409,  0.16864069,
         0.11432107, -0.16837389,  0.12262833,  0.07596641,  0.0547277 ,
        -0.49800919, -0.15285451,  0.05190857,  0.06598779,  0.13862364,
         0.12405569, -0.10416418, -0.0646736 ,  0.17396486, -0.00852556,
         0.01491697,  0.38666698,  0.16321378, -0.07951471, -0.06527001,
        -0.10900733, -0.2684699 ,  0.12342945,  0.33959487,  0.23937176],
       [-0.03962258, -0.00856879,  0.20793405,  0.24357514,  0.03298795,
         0.16381953,  0.15531251, -0.17941648,  0.14152219,  0.00485918,
         0.19442363,  0.27268579,  0.02649044,  0.06238159,  0.23866265,
         0.07324893, -0.28834081,  0.22752778, -0.19418151, -0.06548495,
         0.45417143,  0.09424462, -0.00770298,  0.07170481, -0.05073264,
         0.20892636,  0.21313386, -0.18574656,  0.29759905, -0.02120035],
       [ 0.21763005, -0.29633155, -0.00287073, -0.1409029 ,  0.16987906,
        -0.21917504, -0.35457263, -0.08116125,  0.0518424 , -0.21158137,
        -0.23158164, -0.06480989,  0.21293705, -0.08434906,  0.09398518,
        -0.1986924 , -0.10272197, -0.03724512, -0.18205444, -0.17489667,
         0.20587612, -0.1647287 , -0.07984767,  0.32693115,  0.17723017,
        -0.1785182 ,  0.24010062,  0.2091211 ,  0.08087778,  0.00718601],
       [ 0.10255371, -0.16707734,  0.28966558,  0.04652262, -0.06617442,
        -0.03469241, -0.3847607 ,  0.07110585,  0.13349179,  0.18140405,
        -0.02570972,  0.33890677, -0.25916281, -0.15902314, -0.22030273,
        -0.15962961,  0.03155819,  0.03284111, -0.00765254,  0.38683512,
        -0.07126747,  0.20496183, -0.1996594 ,  0.16900181,  0.19284233,
         0.20399048, -0.13397917, -0.12645112, -0.05704286,  0.02864001],
       [ 0.05316073,  0.01935601, -0.36665616,  0.08694933, -0.17357426,
        -0.24458575,  0.13659313, -0.08701649,  0.19219892, -0.28656805,
        -0.37578541, -0.05252666, -0.10983727, -0.11588596, -0.28569917,
        -0.17984085,  0.07783617,  0.24171964, -0.0193604 ,  0.09308989,
         0.25287821,  0.20428969,  0.06674096, -0.14849359, -0.12648835,
         0.09404876,  0.00091469, -0.14079846,  0.02559695, -0.29169878],
       [-0.14932751,  0.28065489,  0.08647178,  0.01260254,  0.04653833,
        -0.09056972, -0.12551108, -0.03730997,  0.15779295, -0.19881522,
         0.0949697 ,  0.29853609, -0.04187256,  0.27428975, -0.25829612,
        -0.08947463,  0.02663817,  0.08903693,  0.12492118, -0.28974581,
         0.13432411,  0.25826601,  0.02575145,  0.01936238, -0.07614768,
        -0.20829385,  0.12682421,  0.163644  , -0.37237493,  0.35329193],
       [ 0.27477915,  0.07616705,  0.13088078,  0.14787253, -0.30531889,
        -0.29819969, -0.31382315, -0.02289605, -0.26950898,  0.13863794,
         0.07162703, -0.00923876, -0.01521468, -0.09953521,  0.34403801,
        -0.18362158, -0.05366204,  0.23995243,  0.23205106, -0.1855169 ,
        -0.08683894,  0.02201503,  0.29921349, -0.17532192, -0.14714569,
        -0.031855  ,  0.0816224 , -0.16874283, -0.06382745, -0.01917995],
       [-0.05176583,  0.10418905,  0.20801687,  0.05876609,  0.1658157 ,
        -0.36980413,  0.22603749,  0.04759345, -0.04397243,  0.41922579,
         0.06768985,  0.01070294,  0.21826403, -0.06452099, -0.18529249,
        -0.04195755,  0.17520406,  0.15458736,  0.12313484,  0.24381918,
         0.15347012,  0.02128766,  0.0353485 , -0.11865096,  0.10410011,
        -0.14231929,  0.21906682,  0.39351044,  0.18315984, -0.12585256],
       [ 0.04827226, -0.15072425,  0.0811437 , -0.03704241,  0.12666792,
         0.06825534,  0.06042645, -0.21941706,  0.15406322, -0.13726631,
        -0.06979833,  0.0382832 ,  0.08164721,  0.19246107,  0.1309961 ,
        -0.32215293,  0.29161379, -0.25165211,  0.25395086,  0.00624838,
        -0.14386112, -0.0100779 ,  0.00933658, -0.36473059,  0.12430204,
         0.42335593,  0.30471281, -0.01428071,  0.08593964,  0.13784238]])
#A2 = np.eye(32)
B2 = np.eye(30)
C2 = B2
Q2 = B2
R2 = B2
N2 = 0*B2
#initial_value2 = np.array([[1],[1],[1],[1]])
initial_value2 = np.ones((30,1))
reset_rnd2 = False
nonlin_lambda2 = lambda x: 0.0*np.sin(x)
horizon2 = 20
class Automatic_Control_Environment(gym.Env):
    """ ***A simple automatic control environment***
    by Niklas Kotarsky and Eric Bergvall

    The system is described by x_t+1 = A*x_t + B*u_t + noise
    The observed system y_t+1 = C*x_t+1 + noise
    where x_t is a column vector with dimension N and A has dimension N x N
    u_t has dimension M and B then have dimension NxM
    Noise has dimension N and noise_matrix has dimension NxN
    C has dimensions KxN s.t. y has dimension K. Noise dimension K"""


    metadata = {'render.modes': ['human']}
    def __init__(self,A=A2,B=B2,C=C2,Q=Q2,R=R2,N=N2,initial_value=initial_value2, reset_rnd = reset_rnd2, nonlin_lambda = nonlin_lambda2, noise_matrix=0,horizon=horizon2):         
        super(Automatic_Control_Environment, self).__init__()
        self.A = A
        self.B = B
        self.C = C
        self.noise_matrix = noise_matrix
        self.Q = Q
        self.R = R
        self.N = N
        self.reset_rnd = reset_rnd                                                                                                                       
        self.horizon = horizon
        self.initial_value = initial_value
        self.state = self.initial_value
        self.Y_initial = np.random.uniform(0,1,(self.C.shape[0],1))
        self.Y = self.Y_initial
        self.initial_action = np.random.normal(0,1,(self.B.shape[1],1))
        self.action = self.initial_action
        self.state_limit = 1000
        self.nbr_steps = 0
        self.high = 5
        high_vector_act = self.high*np.ones(self.action.shape[0])
        high_vector_obs = self.high*np.ones(self.Y.shape[0])
        self.action_space = spaces.Box(low=-high_vector_act, high=high_vector_act, dtype=np.float32)
        self.observation_space = spaces.Box(low=-high_vector_obs, high=high_vector_obs, dtype=np.float32)
        self.nonlin_term = nonlin_lambda

        self.reward_now = 0
        self.rollout_steps = 19
        #self.lqr_optimal = optimal_lqr_control.Lqr(A,B,Q,R,N,horizon)
        
    def state_space_equation(self, action):
        noise = np.random.normal(0,1,self.state.shape)
        #new_state = self.A@self.state+self.B@action+self.noise_matrix*noise
        new_state = self.A@self.state+self.B@action+self.nonlin_term(self.state)+self.noise_matrix*noise

        return new_state

#    def optimal_step(self, state):
#        optimal_action = self.lqr_optimal.action(state)
#        
#        return optimal_action

    def new_obs(self):
        noise = np.random.normal(0,1,self.Y.shape)

        new_Y = self.C@self.state #+ noise
        return new_Y
    
#    def opt_action(self):
#        optimal_action = self.lqr_optimal.action(self.state)
#        optimal_action = np.squeeze(optimal_action,axis=1)
#        return optimal_action

    def step(self, action):
        action = np.expand_dims(action,axis=1)
        #action = np.clip(action,-self.high,self.high)
        next_state = self.state_space_equation(action)
        #next_state = np.clip(next_state,-self.high,self.high)
        self.state = next_state
        self.action = action         
                                                                                                                       
        next_Y = self.new_obs()
        self.Y = next_Y
        reward = self.reward()
        self.reward_now = reward
        

        next_Y = np.squeeze(next_Y,axis=1)
        next_Y = next_Y.astype('float32')
        #next_state = next_state.squeeze()
        #next_state = next_state.astype('float32')
        _ = self.get_debug_dict()
        
        done = self.done()    
        self.nbr_steps += 1 
        #next_Y = np.clip(-self.high,self.high,next_Y)
        return next_Y, self.reward_now, done, _

    def get_debug_dict(self):
        return dict()


    def render(self, mode='human'):
        nonsense=1
        return
    def close(self):
        nonsense=1
        return

    def observable(self):
        O = []
        for i in range(self.state.shape[0]):
            new_entry = self.C@np.linalg.matrix_power(self.A,i)
            O.append(new_entry)
        O = np.vstack(O)
        rank = np.linalg.matrix_rank(O)
        observable_check = (rank == self.A.shape[0])                                                                                                     
        return observable_check

    def reset(self):
        if self.reset_rnd:
            self.initial_value = np.random.uniform(-0.9,0.9,self.initial_value.shape)

        self.state = self.initial_value
        self.Y = self.new_obs()
        self.action = self.initial_action
        self.nbr_steps = 0
        #self.lqr_optimal.reset()                                                                                                                               

        squeezed_obs = np.squeeze(self.Y,axis=1)
        return squeezed_obs

    def _get_obs(self):
        return self.state

    def reward(self):
        x = self.state
        u = self.action
        x_T = np.transpose(x)
        u_T = np.transpose(u)
        Q = self.Q
        R = self.R
        N = self.N
        current_reward = x_T@Q@x+u_T@R@u+2*x_T@N@x
        return -current_reward[0][0]

    def done(self):
        if self.nbr_steps == self.rollout_steps:
            return True
        #elif np.max(np.abs(self.state)) >= self.high or np.max(np.abs(self.action)) >= self.high:
        #    self.reward_now = self.reward_now + -200+200*self.nbr_steps/self.rollout_steps
        #    return True
        #elif np.max(self.state) > self.high
        else:
            return False


if __name__ == "__main__":
    # A = np.array([[1,0],[0,1]])
    # B = np.array([[1,0],[0,1]])
    # C = np.array([[1,0],[0,1]])
    # Q = np.array([[1,0],[0,1]])
    # R = np.array([[1,0],[0,1]])                                                                                                                    
    # # N = np.array([[0,0],[0,0]])
    #initial_value = np.array([[0.1],[0.1]])
    A = np.array([[0.2,0.3,0.4],[0.1,-0.3,0.4],[0.2,0.5,0.6]])
    B = np.array([[1,0,0],[0,1,0],[0,0,1]])
    C = np.array([[1,1,0],[1,0,0]])
    Q = np.array([[1,0,0],[0,1,0],[0,0,1]])
    R = np.array([[1,0,0],[0,1,0],[0,0,1]]) 
    N = np.array([[0,0,0],[0,0,0],[0,0,0]])
    initial_value = np.array([[0.8],[0.8],[0.8]])
    # A = np.array([[1]])                                                                                                                            
    # # B = np.array([[1]])
    # C = np.array([[1]])
    # Q = np.array([[1]])
    # R = np.array([[1]])
    # N = np.array([[0]])
    # initial_value = np.array([[0.8]])
    ac_env = Automatic_Control_Environment()
    lqr = optimal_lqr_control.Lqr(A2,B2,Q2,R2,N2,20)
    print("obs space: "+str(ac_env.observation_space.shape))
    print("act space: "+str(ac_env.action_space.shape))
    state = ac_env.reset()
    s = []
    a = []
    s.append(state)
    for i in range(20):
        optimal_action = lqr.action(state)
        state, reward, done, _ = ac_env.step(optimal_action)
        s.append(state)
        a.append(optimal_action)
        if i == 19:
            print("s")
       
    
  
         